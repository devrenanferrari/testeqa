import os
import json
from github import Github
from github.GithubException import GithubException

def carregar_resultados():
    """Carrega os resultados da an√°lise do arquivo JSON"""
    try:
        with open("findings.json", "r", encoding='utf-8') as f:
            dados = json.load(f)
            return dados.get("problemas", [])  # Agora usando "problemas" em vez de "findings"
    except FileNotFoundError:
        print("‚ùå Erro: Arquivo findings.json n√£o encontrado")
    except json.JSONDecodeError:
        print("‚ùå Erro: Formato JSON inv√°lido no arquivo findings.json")
    except Exception as e:
        print(f"‚ùå Erro inesperado ao carregar resultados: {str(e)}")
    return []

def postar_comentarios():
    problemas = carregar_resultados()
    
    if not problemas:
        print("‚úÖ Nenhum problema encontrado para comentar")
        return

    try:
        # Configura√ß√£o do GitHub
        token_github = os.getenv("GITHUB_TOKEN")
        if not token_github:
            print("‚ùå Vari√°vel de ambiente GITHUB_TOKEN n√£o encontrada")
            return

        nome_repositorio = os.getenv("GITHUB_REPOSITORY")
        if not nome_repositorio:
            print("‚ùå Vari√°vel de ambiente GITHUB_REPOSITORY n√£o encontrada")
            return

        g = Github(token_github)
        repositorio = g.get_repo(nome_repositorio)

        # Obt√©m o n√∫mero da PR
        try:
            referencia_pr = os.getenv("GITHUB_REF", "")
            numero_pr = int(referencia_pr.split('/')[2])
            pr = repositorio.get_pull(numero_pr)
        except (IndexError, ValueError):
            print("‚ùå N√£o foi poss√≠vel obter o n√∫mero da PR a partir de GITHUB_REF")
            return

        comentarios_postados = 0
        for problema in problemas:
            try:
                # Valida√ß√£o dos campos obrigat√≥rios
                campos_obrigatorios = ['problema', 'gravidade', 'sugestao', 'arquivo', 'linha']
                if not all(campo in problema for campo in campos_obrigatorios):
                    print(f"‚ö†Ô∏è Pulando problema inv√°lido: {problema}")
                    continue

                # Cria o corpo do coment√°rio
                corpo_comentario = (
                    f"ü§ñ **An√°lise Autom√°tica de C√≥digo**\n\n"
                    f"üö® **Problema:** {problema['problema']}\n"
                    f"‚ö†Ô∏è **Gravidade:** {problema['gravidade'].upper()}\n"
                    f"üí° **Sugest√£o:** {problema['sugestao']}\n"
                    f"üìÇ **Arquivo:** `{problema['arquivo']}` Linha `{problema['linha']}`"
                )

                # Posta como coment√°rio geral na PR
                pr.create_issue_comment(corpo_comentario)
                comentarios_postados += 1

            except GithubException as ge:
                print(f"‚ö†Ô∏è Erro na API do GitHub para {problema.get('arquivo', 'desconhecido')}: {str(ge)}")
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao postar coment√°rio para {problema.get('arquivo', 'desconhecido')}: {str(e)}")
        
        print(f"‚úÖ {comentarios_postados}/{len(problemas)} coment√°rios postados com sucesso")
        
    except GithubException as ge:
        print(f"‚ùå Falha na conex√£o com a API do GitHub: {str(ge)}")
    except Exception as e:
        print(f"‚ùå Erro inesperado: {str(e)}")

if __name__ == "__main__":
    postar_comentarios()
